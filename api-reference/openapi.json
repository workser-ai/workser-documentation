{
  "openapi": "3.1.0",
  "info": {
    "title": "Workser Vibe Coding API",
    "description": "Workser is Vibe Coding API for Developers so they can integrate vibe coding into their platform made easy with custom template that ai agent will use your existing backend to help end-user vibe code and got their expected web app easier.",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.workser.ai"
    }
  ],
  "security": [
    {
      "x-api-key": []
    }
  ],
  "paths": {
    "/projects": {
      "post": {
        "operationId": "ProjectController_create",
        "summary": "Create a new project",
        "description": "Creates a new project within a software product. This initializes the project with the specified requirements and sets up the development environment. Then call Coding AI Agent to develop project from requirements.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input data"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        },
        "tags": ["Projects"],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "get": {
        "operationId": "ProjectController_findAll",
        "summary": "Get all projects by software product",
        "description": "Retrieves all projects associated with a specific software product. Projects are returned in the specified order (newest first by default).",
        "parameters": [
          {
            "name": "software_product_id",
            "required": true,
            "in": "query",
            "description": "Software product ID to filter projects",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          },
          {
            "name": "order_by",
            "required": false,
            "in": "query",
            "description": "Sort order for projects by creation date",
            "schema": {
              "enum": ["ASC", "DESC"],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Projects retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - software_product_id is required"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          }
        },
        "tags": ["Projects"],
        "security": [
          {
            "apiKeyAuth": []
          }
        ]
      }
    },
    "/projects/{id}": {
      "get": {
        "operationId": "ProjectController_findOne",
        "summary": "Get project by ID",
        "description": "Retrieves detailed information about a specific project including its configuration, status, and metadata.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "Project not found"
          }
        },
        "tags": ["Projects"],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "patch": {
        "operationId": "ProjectController_update",
        "summary": "Update project by ID",
        "description": "Updates an existing project. You can update provided fields.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input data"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "Project not found"
          }
        },
        "tags": ["Projects"],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "ProjectController_remove",
        "summary": "Delete project by ID",
        "description": "Permanently deletes a project and all associated resources. This action cannot be undone. All tasks, deployments, and configurations will be removed.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project deleted successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Project not found"
          }
        },
        "tags": ["Projects"],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/projects/{id}/tasks": {
      "get": {
        "operationId": "ProjectController_getProjectTasks",
        "summary": "Get all tasks by ai agent for a project",
        "description": "Retrieves all tasks by ai agent associated with a specific project.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskResponseDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "Project not found"
          }
        },
        "tags": ["Projects"],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/projects/{id}/web": {
      "get": {
        "operationId": "ProjectController_getProjectWeb",
        "summary": "Get web deployment information of project",
        "description": "Retrieves web deployment details of the project.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Web deployment information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectWebInfoDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "Project not found or no web deployment configured"
          }
        },
        "tags": ["Projects"],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/projects/{id}/publish": {
      "post": {
        "operationId": "ProjectController_publishProject",
        "summary": "Publish project with custom subdomain",
        "description": "Publishes the latest deployment of your project to a custom subdomain under workser.app (e.g., my-app.workser.app). The project must have an active deployment before publishing. You own custom domain coming soon.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishProjectDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project published successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublishProjectResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid hostname or no active deployment"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "Project not found"
          },
          "409": {
            "description": "Conflict - Hostname already in use"
          }
        },
        "tags": ["Projects"],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/projects/{id}/hostnames": {
      "get": {
        "operationId": "ProjectController_getProjectHostnames",
        "summary": "Get all hostnames assigned to a project",
        "description": "Retrieves all hostnames that are currently assigned to this project.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project hostnames retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectHostnamesDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "Project not found"
          }
        },
        "tags": ["Projects"],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/tasks": {
      "post": {
        "operationId": "TaskController_createTask",
        "summary": "Assign a new task to the Coding AI Agent",
        "description": "Creates and assigns a new coding task to the AI agent for a specific project based on the provided requirements.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input data or missing required fields"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "Project not found"
          }
        },
        "tags": ["Tasks"],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/tasks/{id}": {
      "get": {
        "operationId": "TaskController_findTaskById",
        "summary": "Get specific task information",
        "description": "Retrieves comprehensive information about a specific task.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Task ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "Task not found"
          }
        },
        "tags": ["Tasks"],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/tasks/{id}/steps": {
      "get": {
        "operationId": "TaskController_getStepsByTaskId",
        "summary": "Get all steps for a specific task",
        "description": "Retrieves all execution steps for a task in chronological order. Each step represents a discrete unit of work by Coding AI Agent.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Task ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task steps retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskStepResponseDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "Task not found"
          }
        },
        "tags": ["Tasks"],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/tasks/{id}/steps-and-usages": {
      "get": {
        "operationId": "TaskController_getTaskStepsAndUsagesByTaskId",
        "summary": "Get all steps and resource usage for a task",
        "description": "Retrieves comprehensive information including all task steps and their associated resource usage records. This provides complete visibility into task execution costs, token consumption, and detailed billing information.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Task ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Steps and usages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "steps": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TaskStepResponseDto"
                      }
                    },
                    "usages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TaskUsageResponseDto"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "Task not found"
          }
        },
        "tags": ["Tasks"],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/tasks/steps/{stepId}": {
      "get": {
        "operationId": "TaskController_findTaskStepById",
        "summary": "Get specific task step",
        "description": "Retrieves detailed information about a specific task step.",
        "parameters": [
          {
            "name": "stepId",
            "required": true,
            "in": "path",
            "description": "Task Step ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task step retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStepResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "Task step not found"
          }
        },
        "tags": ["Tasks"],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Workser Core API service",
      "description": ""
    }
  ],
  "components": {
    "schemas": {
      "CreateProjectDto": {
        "type": "object",
        "properties": {
          "software_product_id": {
            "type": "string",
            "description": "Software product ID that this project belongs to",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "name": {
            "type": "string",
            "description": "Project name",
            "example": "E-commerce Web Application"
          },
          "description": {
            "type": "string",
            "description": "Project description",
            "example": "A modern e-commerce web application built with React and Node.js"
          },
          "project_type": {
            "type": "string",
            "description": "Type of project",
            "enum": ["web"],
            "example": "web"
          },
          "text_requirement": {
            "type": "string",
            "description": "Text-based requirements for the project",
            "example": "Change coloe theme of landing page to be blue with white text and add a new button to the header"
          },
          "files_requirement": {
            "description": "Files to be added to the project",
            "example": [
              {
                "url": "https://example.com/file1.png",
                "file_type": "image"
              },
              {
                "url": "https://example.com/file2.jpg",
                "file_type": "image"
              }
            ],
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "description": "URL of the file"
                },
                "file_type": {
                  "type": "string",
                  "description": "Type of the file",
                  "enum": ["image"]
                }
              }
            }
          },
          "user_email": {
            "type": "string",
            "description": "User email from your application",
            "example": "john.doe@example.com"
          },
          "return_url": {
            "type": "string",
            "description": "Return URL for prebuilt UI to get back to your application",
            "example": "https://example.com/back"
          },
          "ref_id": {
            "type": "string",
            "description": "Reference ID with your application",
            "example": "1234567890"
          }
        }
      },
      "ProjectResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Project ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "software_product_id": {
            "type": "string",
            "description": "Software product ID",
            "example": "550e8400-e29b-41d4-a716-446655440001"
          },
          "name": {
            "type": "string",
            "description": "Project name",
            "example": "E-commerce Web Application"
          },
          "description": {
            "type": "string",
            "description": "Project description",
            "example": "A modern e-commerce web application built with React and Node.js"
          },
          "project_type": {
            "type": "string",
            "description": "Type of project",
            "enum": ["web"],
            "example": "web"
          },
          "project_template_type": {
            "type": "string",
            "description": "Project template type",
            "example": "nextjs_typescript"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-15T12:00:00.000Z"
          },
          "user_email": {
            "type": "string",
            "description": "User email from your application",
            "example": "john.doe@example.com"
          },
          "prebuilt_url": {
            "type": "string",
            "description": "Prebuilt UI URL for to use by user to interact with Workser Coding AI Agent directly",
            "example": "https://example.com/prebuilt"
          },
          "return_url": {
            "type": "string",
            "description": "Return URL for prebuilt UI to get back to your application",
            "example": "https://example.com/back"
          },
          "ref_id": {
            "type": "string",
            "description": "Reference ID with your application",
            "example": "1234567890"
          }
        }
      },
      "UpdateProjectDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Project name",
            "example": "E-commerce Web Application"
          },
          "description": {
            "type": "string",
            "description": "Project description",
            "example": "A modern e-commerce web application built with React and Node.js"
          },
          "user_email": {
            "type": "string",
            "description": "User email from your application",
            "example": "john.doe@example.com"
          },
          "return_url": {
            "type": "string",
            "description": "Return URL for prebuilt UI to get back to your application",
            "example": "https://example.com/back"
          },
          "ref_id": {
            "type": "string",
            "description": "Reference ID with your application",
            "example": "1234567890"
          }
        }
      },
      "TaskStepResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Task step ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "task_id": {
            "type": "string",
            "description": "Task ID that this step belongs to",
            "example": "550e8400-e29b-41d4-a716-446655440001"
          },
          "name": {
            "type": "string",
            "description": "Task step name",
            "example": "Create user registration endpoint"
          },
          "description": {
            "type": "string",
            "description": "Task step description",
            "example": "Implement POST /auth/register endpoint with validation"
          },
          "status": {
            "type": "string",
            "description": "Task step status",
            "enum": [
              "pending",
              "in_progress",
              "completed",
              "failed",
              "cancelled"
            ],
            "example": "in_progress"
          },
          "type": {
            "type": "string",
            "description": "Type of task step: this can be null if step type not in special type in enum",
            "example": "ai_agent_message",
            "enum": [
              "ai_agent_message",
              "image_understanding",
              "research",
              "image_generation"
            ]
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata for the task step: path, tool, command, pattern, and etc. depends on tool used in step",
            "examples": [
              {
                "path": "src/pages/index.tsx",
                "tool": "read_file_from_sandbox"
              },
              {
                "command": "npm install react",
                "tool": "run_command_in_sandbox"
              },
              {
                "tool": "replace_text_in_files_sandbox",
                "files": ["src/app/page.tsx"],
                "pattern": "import { Header } from \"@/components/layout/Header\"",
                "new_value": "import Header from \"@/components/layout/Header\""
              },
              {
                "path": "src/app/page.tsx",
                "tool": "write_file_to_sandbox"
              },
              {
                "path": "",
                "tool": "get_list_of_files_in_sandbox"
              },
              {
                "tool": "replace_text_in_files_sandbox",
                "files": ["src/app/page.tsx"],
                "pattern": "import { Header } from \"@/components/layout/Header\"",
                "new_value": "import Header from \"@/components/layout/Header\""
              }
            ]
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-15T12:00:00.000Z"
          }
        }
      },
      "TaskResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Task ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "project_id": {
            "type": "string",
            "description": "Project ID that this task belongs to",
            "example": "550e8400-e29b-41d4-a716-446655440001"
          },
          "name": {
            "type": "string",
            "description": "Task name",
            "example": "Implement user authentication"
          },
          "description": {
            "type": "string",
            "description": "Task description",
            "example": "Create login and registration functionality with JWT tokens"
          },
          "status": {
            "type": "string",
            "description": "Task status",
            "enum": ["todo", "in_progress", "completed", "failed", "cancelled"],
            "example": "todo"
          },
          "text_requirement": {
            "type": "string",
            "description": "Text-based requirements for the task",
            "example": "Change coloe theme of landing page to be blue with white text and add a new button to the header"
          },
          "files_requirement": {
            "description": "File-based requirements (JSON array), For now receive only image url.",
            "example": [
              {
                "file_type": "image",
                "url": "https://example.com/image.png"
              }
            ],
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "file_type": {
                  "type": "string",
                  "description": "Type of the file",
                  "enum": ["image"]
                },
                "url": {
                  "type": "string",
                  "description": "URL of the file"
                }
              }
            }
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-15T12:00:00.000Z"
          },
          "steps": {
            "description": "Task steps for this task",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskStepResponseDto"
            }
          },
          "branch": {
            "type": "string",
            "description": "Branch",
            "example": "dev"
          },
          "total_price": {
            "type": "number",
            "description": "Total price used by this task in USD",
            "example": 0.5
          }
        }
      },
      "TaskUsageResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Task usage ID",
            "example": "41219200-f300-4e7f-9b42-a93e6053609f"
          },
          "task_id": {
            "type": "string",
            "description": "Task ID",
            "example": "b6e03e3a-8b29-4e13-be9c-0cdc7a4309c7"
          },
          "usage_type": {
            "type": "string",
            "description": "Type of usage",
            "example": "llm_call"
          },
          "provider": {
            "type": "string",
            "description": "Provider name",
            "example": "zai"
          },
          "model": {
            "type": "string",
            "description": "Model name",
            "example": "glm-4.6"
          },
          "remark": {
            "type": "string",
            "description": "Remark or additional information",
            "example": "run--fbc6da64-57b9-4805-b06d-4e587c794e86-0"
          },
          "request_data": {
            "type": "object",
            "description": "Request data",
            "example": {}
          },
          "response_data": {
            "type": "object",
            "description": "Response data from the provider",
            "properties": {
              "id": {
                "type": "string",
                "example": "202510012106299ba4756e42f3470e"
              },
              "logprobs": {
                "type": "object",
                "nullable": true,
                "example": null
              },
              "model_name": {
                "type": "string",
                "example": "glm-4.6"
              },
              "token_usage": {
                "type": "object",
                "properties": {
                  "total_tokens": {
                    "type": "number",
                    "example": 9710
                  },
                  "prompt_tokens": {
                    "type": "number",
                    "example": 9662
                  },
                  "completion_tokens": {
                    "type": "number",
                    "example": 48
                  },
                  "prompt_tokens_details": {
                    "type": "object",
                    "properties": {
                      "audio_tokens": {
                        "type": "number",
                        "nullable": true,
                        "example": null
                      },
                      "cached_tokens": {
                        "type": "number",
                        "example": 43
                      }
                    }
                  },
                  "completion_tokens_details": {
                    "type": "object",
                    "nullable": true,
                    "example": null
                  }
                }
              },
              "service_tier": {
                "type": "string",
                "nullable": true,
                "example": null
              },
              "finish_reason": {
                "type": "string",
                "example": "tool_calls"
              },
              "system_fingerprint": {
                "type": "string",
                "nullable": true,
                "example": null
              }
            }
          },
          "usage_metadata": {
            "type": "object",
            "description": "Usage metadata",
            "properties": {
              "input_tokens": {
                "type": "number",
                "example": 9662
              },
              "total_tokens": {
                "type": "number",
                "example": 9710
              },
              "output_tokens": {
                "type": "number",
                "example": 48
              },
              "cache_read_tokens": {
                "type": "number",
                "example": 43
              },
              "input_token_details": {
                "type": "object",
                "properties": {
                  "cache_read": {
                    "type": "number",
                    "example": 43
                  }
                }
              },
              "output_token_details": {
                "type": "object",
                "example": {}
              }
            }
          },
          "price": {
            "type": "object",
            "description": "Price breakdown",
            "properties": {
              "input_price": {
                "type": "number",
                "example": 0.006957
              },
              "total_price": {
                "type": "number",
                "example": 0.00709
              },
              "output_price": {
                "type": "number",
                "example": 0.000127
              },
              "cache_read_price": {
                "type": "number",
                "example": 0.000006
              }
            }
          },
          "final_price": {
            "type": "number",
            "description": "Final price in USD",
            "example": 0.00709
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2025-10-01T13:06:31.345Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2025-10-01T13:06:31.345Z"
          }
        }
      },
      "ProjectWebInfoDto": {
        "type": "object",
        "properties": {
          "project_id": {
            "type": "string",
            "description": "Project ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "preview_url": {
            "type": "string",
            "description": "Preview URL",
            "example": "https://my-project.workser.app"
          },
          "production_url": {
            "type": "string",
            "description": "Production URL: coming soon when we imlpement 2 environments.",
            "example": "my-app.workser.app"
          },
          "deployment_status": {
            "type": "string",
            "description": "Deployment status",
            "example": "READY",
            "enum": ["success", "failed"]
          },
          "deployment_ready_status": {
            "type": "string",
            "description": "Deployment ready status",
            "example": "READY",
            "enum": ["BUILDING", "READY", "ERROR", "QUEUED", "CANCELED"]
          },
          "deployment_error_logs": {
            "type": "string",
            "description": "Deployment error logs",
            "example": "Error: Failed to build the project"
          },
          "deployment_done_at": {
            "format": "date-time",
            "type": "string",
            "description": "Deployment completion timestamp",
            "example": "2024-01-15T12:00:00.000Z"
          },
          "latest_task_status": {
            "type": "string",
            "description": "Latest task status",
            "example": "completed"
          }
        },
        "required": ["project_id"]
      },
      "PublishProjectDto": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "Hostname of the sub domain in format `{sub_domain}.workser.app` to publish the project. Custom domain of your own domain or user domain coming soon.",
            "example": "my-app.workser.app"
          }
        },
        "required": ["hostname"]
      },
      "PublishProjectResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the publish project",
            "example": "success",
            "enum": ["success", "failed"]
          },
          "message": {
            "type": "string",
            "description": "Message",
            "example": ["Project published successfully", "Error message ..."]
          }
        },
        "required": ["status", "message"]
      },
      "ProjectHostnamesDto": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the custom domain",
              "example": "my-app.workser.app"
            },
            "created": {
              "type": "string",
              "description": "Created at",
              "example": "2025-09-30T12:04:43.163Z"
            }
          }
        }
      },
      "CreateTaskDto": {
        "type": "object",
        "properties": {
          "project_id": {
            "type": "string",
            "description": "Project ID that this task belongs to",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "name": {
            "type": "string",
            "description": "Task name",
            "example": "Implement user authentication"
          },
          "description": {
            "type": "string",
            "description": "Task description",
            "example": "Create login and registration functionality with JWT tokens"
          },
          "text_requirement": {
            "type": "string",
            "description": "Text-based requirements for the task",
            "example": "Use bcrypt for password hashing and implement rate limiting"
          },
          "files_requirement": {
            "description": "File-based requirements (JSON array)",
            "example": [
              {
                "file_type": "image",
                "url": "https://example.com/image.png"
              }
            ],
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "file_type": {
                  "type": "string",
                  "description": "Type of the file",
                  "enum": ["image"]
                },
                "url": {
                  "type": "string",
                  "description": "URL of the file"
                }
              }
            }
          },
          "flow": {
            "type": "string",
            "description": "Workflow type that determines how the AI agent will execute this task.",
            "example": "new_task",
            "enum": ["new_task"]
          }
        },
        "required": ["project_id", "name", "flow", "text_requirement"]
      },
      "UpdateTaskDto": {
        "type": "object",
        "properties": {
          "project_id": {
            "type": "string",
            "description": "Project ID that this task belongs to",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "name": {
            "type": "string",
            "description": "Task name",
            "example": "Implement user authentication"
          },
          "description": {
            "type": "string",
            "description": "Task description",
            "example": "Create login and registration functionality with JWT tokens"
          },
          "branch": {
            "type": "string",
            "description": "Branch that this task belongs to",
            "example": "main",
            "default": "dev"
          },
          "status": {
            "type": "string",
            "description": "Task status",
            "enum": ["todo", "in_progress", "completed", "failed", "cancelled"],
            "example": "todo",
            "default": "todo"
          },
          "text_requirement": {
            "type": "string",
            "description": "Text-based requirements for the task",
            "example": "Use bcrypt for password hashing and implement rate limiting"
          },
          "files_requirement": {
            "description": "File-based requirements (JSON array)",
            "example": [
              {
                "filename": "auth.spec.js",
                "content": "test specifications"
              }
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata for the task",
            "example": {
              "priority": "high",
              "estimated_hours": 8
            }
          },
          "flow": {
            "type": "string",
            "description": "Workflow type that determines how the AI agent will execute this task. Available flows: \"new_project\", \"new_task\"",
            "example": "web_generation",
            "enum": ["new_project", "new_task"]
          }
        }
      },
      "CreateTaskStepDto": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string",
            "description": "Task ID that this step belongs to",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "name": {
            "type": "string",
            "description": "Task step name",
            "example": "Create user registration endpoint"
          },
          "description": {
            "type": "string",
            "description": "Task step description",
            "example": "Implement POST /auth/register endpoint with validation"
          },
          "status": {
            "type": "string",
            "description": "Task step status",
            "enum": [
              "pending",
              "in_progress",
              "completed",
              "failed",
              "cancelled"
            ],
            "example": "pending",
            "default": "pending"
          },
          "type": {
            "type": "string",
            "description": "Type of task step",
            "example": "coding, research, testing, documentation, and etc."
          },
          "results": {
            "type": "object",
            "description": "Step execution results",
            "example": {
              "endpoint_created": true,
              "tests_passed": false
            }
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata for the task step",
            "example": {
              "complexity": "medium",
              "dependencies": ["database", "validation"]
            }
          }
        },
        "required": ["task_id", "name"]
      },
      "CreateTaskStepUsageDto": {
        "type": "object",
        "properties": {
          "usage_type": {
            "type": "string",
            "description": "Type of usage",
            "example": "api_call"
          },
          "usage_count": {
            "type": "number",
            "description": "Number of times used",
            "example": 1,
            "minimum": 1
          },
          "tokens_consumed": {
            "type": "number",
            "description": "Tokens consumed",
            "example": 2500
          },
          "duration_ms": {
            "type": "number",
            "description": "Duration in milliseconds",
            "example": 3000
          },
          "cost": {
            "type": "number",
            "description": "Cost associated with usage (will be used for calculation if higher than calculated cost)",
            "example": 0.08
          },
          "status": {
            "type": "string",
            "description": "Usage status",
            "example": "success"
          },
          "error_message": {
            "type": "string",
            "description": "Error message if failed",
            "example": "API rate limit exceeded"
          },
          "request_data": {
            "type": "object",
            "description": "Input data for this usage",
            "example": {
              "prompt": "Generate authentication middleware",
              "language": "TypeScript"
            }
          },
          "response_data": {
            "type": "object",
            "description": "Output data from this usage",
            "example": {
              "generated_code": "...",
              "file_count": 2
            }
          },
          "metadata": {
            "type": "object",
            "description": "Additional usage metadata (can include provider, model, input_tokens, output_tokens for better cost calculation)",
            "example": {
              "model_version": "4.0",
              "temperature": 0.7,
              "provider": "openai",
              "model": "gpt-4",
              "input_tokens": 1000,
              "output_tokens": 500
            }
          },
          "cost_calculation": {
            "type": "object",
            "description": "Cost calculation",
            "example": {
              "input_tokens": 1000,
              "output_tokens": 500
            }
          },
          "price": {
            "type": "object",
            "description": "Price",
            "example": {
              "input_tokens": 1000,
              "output_tokens": 500
            }
          },
          "final_cost": {
            "type": "number",
            "description": "Final cost",
            "example": 1000
          },
          "final_price": {
            "type": "number",
            "description": "Final price",
            "example": 1000
          },
          "model": {
            "type": "string",
            "description": "Model",
            "example": "gpt-4"
          },
          "provider": {
            "type": "string",
            "description": "Provider",
            "example": "openai"
          },
          "usage_metadata": {
            "type": "object",
            "description": "Usage metadata"
          },
          "remark": {
            "type": "string",
            "description": "Remark id",
            "example": "123"
          }
        },
        "required": [
          "usage_type",
          "cost_calculation",
          "price",
          "final_cost",
          "final_price",
          "model",
          "provider",
          "usage_metadata",
          "remark"
        ]
      }
    }
  }
}
